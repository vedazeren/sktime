{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Shapelets and the Shapelet Transform with sktime\n",
    "\n",
    "Introduced in [1], a shapelet is a time series subsequences that is identified as being representative of class membership. Shapelets are a powerful approach for measuring _phase-independent_ similarity between time series; they can occur at any point within a series and offer _interpretable_ results for how matches occur. The original research extracted shapelets to build a decision tree classifier. As an example, the top shapelet from the <a href=\"http://timeseriesclassification.com/description.php?Dataset=GunPoint\">GunPoint</a> problem found in [1] is shown below (the shapelet is highlighted in red):\n",
    "\n",
    "![shapelet gun point](img/shapelets_gun_point.PNG)\n",
    "\n",
    "The GunPoint problem contains univariate tracking data of actor's wrists as they either take a prop gun from a holster, point it, and return it to the holster, or they simply mime the action without the prop. The classification problem is to detect whether a motion trace is a case of _gun_ or _no gun_. The most discriminatory shapelet shown above offers an interpretable result into how classification decisions can be made; the highlighted red section of the series above is the shapelet and it occurs when an actor returns the gun to the holster. As explained in [1], this is discriminatory because if the gun prop is present then the actor's hand stops suddenly, but if the prop is not present, the actor's hand will not stop abruptly and will subtly continue past their waist due to inertia.\n",
    "\n",
    "## The Shapelet Transform\n",
    "\n",
    "Much research emphasis has been placed on shapelet-based approaches for time series classification (TSC) since the original research was proposed. The current state-of-the-art for shapelets is the **shapelet transform** (ST) [2, 3]. The transform improves upon the original use of shapelets by separating shapelet extraction from the classification algorithm, allowing interpretable phase-independent classification of time series with any standard classification algorithm (such as random/rotation forest, neural networks, nearest neighbour classifications, ensembles of all, etc.). To facilitate this, rather than recursively assessing data for the best shapelet, the transform evaluates candidate shapelets in a single procedure to rank them based on information gain. Then, given a set of _k_ shapelets, a time series can be transformed into _k_ features by calculating the distance from the series to each shapelet. By transforming a dataset in this manner any vector-based classification algorithm can be applied to a shapelet-transformed time series problem while the interpretability of shapelets is maintained through the ranked list of the _best_ shapelets during transformation. An example of the interpretability offered from ST is shown below with the top 10 shapelets extracted from the GunPoint problem in [2]:\n",
    "\n",
    "![shapelets gun point transform](img/shapelets_gun_point_transform.PNG)\n",
    "\n",
    "The image above demonstrates that there are two clear groupings of shapelets: one where the gun is placed into the holster, as in [1], but also one where the gun is removed from the holster. It would be a reasonable assumption that if placing the prob back into the holster is discriminatory then removing it from the holster should also be; this was not detected in the original research but is explicitly identified by using the shapelet transform.\n",
    "\n",
    "#### References\n",
    "[1] Ye, Lexiang, and Eamonn Keogh. \"Time series shapelets: a novel technique that allows accurate, interpretable and fast classification.\" Data mining and knowledge discovery 22, no. 1-2 (2011): 149-182.\n",
    "\n",
    "[2] Lines, Jason, Luke M. Davis, Jon Hills, and Anthony Bagnall. \"A shapelet transform for time series classification.\" In Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining, pp. 289-297. ACM, 2012.\n",
    "\n",
    "[3] Hills, Jon, Jason Lines, Edgaras Baranauskas, James Mapp, and Anthony Bagnall. \"Classification of time series by shapelet transformation.\" Data Mining and Knowledge Discovery 28, no. 4 (2014): 851-881.\n",
    "\n",
    "[4] Bostrom, Aaron, and Anthony Bagnall. \"Binary shapelet transform for multiclass time series classification.\" In Transactions on Large-Scale Data-and Knowledge-Centered Systems XXXII, pp. 24-46. Springer, Berlin, Heidelberg, 2017.\n",
    "\n",
    "## Example: The Shapelet Transform in sktime\n",
    "\n",
    "The following workbook demonstrates a full workflow of using the shapelet transform in `sktime` with a `scikit-learn` classifier with the GunPoint problem.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sktime.datasets import load_gunpoint\n",
    "from sktime.transformers.series_as_features.shapelets import ContractedShapeletTransform\n",
    "\n",
    "train_x, train_y = load_gunpoint(split='train', return_X_y=True)\n",
    "test_x, test_y = load_gunpoint(split='test', return_X_y=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "visiting series: 15 (#1)\n",
      "Candidate finished. 00:05 remaining\n",
      "Candidate finished. 00:05 remaining\n",
      "Candidate finished. 00:05 remaining\n",
      "Candidate finished. 00:05 remaining\n",
      "Candidate rejected. 00:04 remaining\n",
      "Candidate finished. 00:04 remaining\n",
      "Candidate finished. 00:04 remaining\n",
      "Candidate finished. 00:04 remaining\n",
      "Candidate finished. 00:03 remaining\n",
      "Candidate finished. 00:03 remaining\n",
      "visiting series: 4 (#2)\n",
      "Candidate finished. 00:03 remaining\n",
      "Candidate finished. 00:03 remaining\n",
      "Candidate finished. 00:03 remaining\n",
      "Candidate finished. 00:03 remaining\n",
      "Candidate finished. 00:02 remaining\n",
      "Candidate finished. 00:02 remaining\n",
      "Candidate finished. 00:02 remaining\n",
      "Candidate finished. 00:02 remaining\n",
      "Candidate finished. 00:01 remaining\n",
      "Candidate finished. 00:01 remaining\n",
      "visiting series: 24 (#3)\n",
      "Candidate finished. 00:01 remaining\n",
      "Candidate finished. 00:01 remaining\n",
      "Candidate finished. 00:01 remaining\n",
      "Candidate finished. 00:01 remaining\n",
      "Candidate finished. 00:00 remaining\n",
      "Candidate rejected. 00:00 remaining\n",
      "Candidate finished. 00:00 remaining\n",
      "No more time available! It's been 00:05\n",
      "Stopping search\n"
     ]
    }
   ],
   "source": [
    "# How long (in minutes) to extract shapelets for.\n",
    "# This is a simple lower-bound initially; once time is up, no further shapelets will be assessed\n",
    "time_contract_in_mins = 0.5\n",
    "\n",
    "# The initial number of shapelet candidates to assess per training series. If all series are visited\n",
    "# and time remains on the contract then another pass of the data will occur\n",
    "initial_num_shapelets_per_case = 10\n",
    "\n",
    "# Whether or not to print on-going information about shapelet extraction. Useful for demo/debugging\n",
    "verbose = 2\n",
    "\n",
    "st = ContractedShapeletTransform(\n",
    "    time_contract_in_mins=time_contract_in_mins,\n",
    "    num_candidates_to_sample_per_case=initial_num_shapelets_per_case,\n",
    "    verbose=verbose)\n",
    "st.fit(train_x, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series ID: 15, start_pos: 75, length: 74, info_gain: 0.6504518266138437, \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series ID: 24, start_pos: 100, length: 17, info_gain: 0.40883397854940606, \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series ID: 4, start_pos: 9, length: 83, info_gain: 0.3582289761063985, \n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series ID: 24, start_pos: 67, length: 4, info_gain: 0.2747133107726767, \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# for each extracted shapelet (in descending order of quality/information gain)\n",
    "for s in st.shapelets[0:5]:\n",
    "\n",
    "    # summary info about the shapelet\n",
    "    print(s)\n",
    "\n",
    "    # plot the series that the shapelet was extracted from\n",
    "    plt.plot(\n",
    "        train_x.iloc[s.series_id,0],\n",
    "        'gray'\n",
    "    )\n",
    "\n",
    "    # overlay the shapelet onto the full series\n",
    "    plt.plot(\n",
    "        list(range(s.start_pos,(s.start_pos+s.length))),\n",
    "        train_x.iloc[s.series_id,0][s.start_pos:s.start_pos+s.length],\n",
    "        'r',\n",
    "        linewidth=3.0\n",
    "    )\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#0: Series ID: 15, start_pos: 75, length: 74, info_gain: 0.6504518266138437, \n",
      "#1: Series ID: 24, start_pos: 100, length: 17, info_gain: 0.40883397854940606, \n",
      "#2: Series ID: 4, start_pos: 9, length: 83, info_gain: 0.3582289761063985, \n",
      "#3: Series ID: 24, start_pos: 67, length: 4, info_gain: 0.2747133107726767, \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# for each extracted shapelet (in descending order of quality/information gain)\n",
    "for i in range(0,min(len(st.shapelets),5)):\n",
    "    s = st.shapelets[i]\n",
    "    # summary info about the shapelet\n",
    "    print(\"#\"+str(i)+\": \"+str(s))\n",
    "\n",
    "    # overlay shapelets\n",
    "    plt.plot(\n",
    "        list(range(s.start_pos,(s.start_pos+s.length))),\n",
    "        train_x.iloc[s.series_id,0][s.start_pos:s.start_pos+s.length]\n",
    "    )\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results:\n",
      "Correct:\n",
      "\t143/150\n",
      "\t0.9533333333333334\n",
      "\n",
      "Timing:\n",
      "\tTo build:   6.9595160484313965 secs\n",
      "\tTo predict: 3.520045042037964 secs\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from sktime.datasets import load_gunpoint\n",
    "from sklearn.ensemble.forest import RandomForestClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "train_x, train_y = load_gunpoint(split='train', return_X_y=True)\n",
    "test_x, test_y = load_gunpoint(split='test', return_X_y=True)\n",
    "\n",
    "# example pipleine with 1 minute time limit\n",
    "pipeline = Pipeline([\n",
    "    ('st', ContractedShapeletTransform(time_contract_in_mins=time_contract_in_mins,\n",
    "                                       num_candidates_to_sample_per_case=10,\n",
    "                                       verbose=False)),\n",
    "    ('rf', RandomForestClassifier(n_estimators=100)),\n",
    "])\n",
    "\n",
    "start = time.time()\n",
    "pipeline.fit(train_x, train_y)\n",
    "end_build = time.time()\n",
    "preds = pipeline.predict(test_x)\n",
    "end_test = time.time()\n",
    "\n",
    "print(\"Results:\")\n",
    "print(\"Correct:\")\n",
    "correct = sum(preds == test_y)\n",
    "print(\"\\t\"+str(correct)+\"/\"+str(len(test_y)))\n",
    "print(\"\\t\"+str(correct/len(test_y)))\n",
    "print(\"\\nTiming:\")\n",
    "print(\"\\tTo build:   \"+str(end_build-start)+\" secs\")\n",
    "print(\"\\tTo predict: \"+str(end_test-end_build)+\" secs\")"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
